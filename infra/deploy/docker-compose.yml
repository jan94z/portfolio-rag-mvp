services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    ports:
      - "6333:6333" # not optimal for production, but useful for dev. Firewall rules should be applied to restrict access

  postgres:
    image: postgres:latest
    container_name: rag-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432" # not optimal for production, but useful for dev. Firewall rules should be applied to restrict access

  api:
    image: ${DOCKERHUB_USERNAME}/portfolio-rag-mvp-api:latest
    container_name: rag-api
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_TOKEN_EXPIRE_MINUTES=${JWT_TOKEN_EXPIRE_MINUTES}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    depends_on:
      - qdrant
    restart: unless-stopped
    expose:
      - "8000"

  frontend:
    image: ${DOCKERHUB_USERNAME}/portfolio-rag-mvp-frontend:latest
    container_name: rag-frontend
    ports:
      - "8501:8501"
    volumes:
      # - /root/.streamlit:/root/.streamlit
      - ./config.toml:/root/.streamlit/config.toml
    environment:
      BACKEND_URL: "http://rag-api:8000/api/v1"

volumes:
  qdrant_data:
  postgres_data:
